"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentsHandler = void 0;
const discord_js_1 = require("discord.js");
const utils_1 = require("./utils");
const events_1 = require("events");
const ComponentBuilder_1 = require("./ComponentBuilder");
class ComponentsHandler extends events_1.EventEmitter {
    /**
     * Creates a new handler for Discord bot client's interaction components events.
     * @param {string} path The directory path.
     * @param {boolean | undefined} includesDir Whenever the directory has sub-dirs or not.
     * @typeParam {Client} C The Discord bot Client.
     */
    constructor(path, includesDir) {
        super({ captureRejections: false });
        this.collection = new discord_js_1.Collection();
        this.includesDir = false;
        /**
         * Creates a new component for the handler.
         *
         * **Warning**: Make sure that you have exported it as `default`.
         *
         * ```ts
         * // TypeScript
         * export default new [handler].component(...);
         *
         * // JavaScript (CommonJS)
         * module.exports = new [handler].component(...);
         * ```
         */
        this.component = class extends ComponentBuilder_1.ComponentBuilder {
            constructor(data) {
                super(data);
            }
            ;
        };
        if (!path)
            throw new utils_1.HorizonError('MissingRequiredParameter', '\'path\' is required for the constructor.');
        if (includesDir && typeof includesDir !== 'boolean')
            throw new utils_1.HorizonError('InvalidParameterType', '\'includesDir\' is not type of boolean.');
        this.path = path;
        this.includesDir = includesDir;
    }
    ;
    /**
     * Loads all components from the provided path.
     * @param {C} defaultListener The options.
     */
    load(defaultListener) {
        return new Promise(async (resolved, rejected) => {
            try {
                const data = await (0, utils_1.importFromDir)(this.path, {
                    includesDir: this.includesDir
                });
                for (const module of data) {
                    if (!module.customId || !module.type || !module.run || module.disabled) {
                        this.emit('fileSkip', module.customId, module.type);
                        continue;
                    }
                    ;
                    if (defaultListener) {
                        const client = defaultListener;
                        if (!(client instanceof discord_js_1.Client))
                            throw new TypeError('client is not instance of Client.');
                        client.on('interactionCreate', async (interaction) => {
                            if (interaction.isButton() && module.type === 1 && interaction.customId === module.customId)
                                module.run(client, interaction);
                            if (interaction.isStringSelectMenu() && module.type === 2 && interaction.customId === module.customId)
                                module.run(client, interaction);
                            if (interaction.isUserSelectMenu() && module.type === 3 && interaction.customId === module.customId)
                                module.run(client, interaction);
                            if (interaction.isRoleSelectMenu() && module.type === 4 && interaction.customId === module.customId)
                                module.run(client, interaction);
                            if (interaction.isMentionableSelectMenu() && module.type === 5 && interaction.customId === module.customId)
                                module.run(client, interaction);
                            if (interaction.isChannelSelectMenu() && module.type === 6 && interaction.customId === module.customId)
                                module.run(client, interaction);
                            if (interaction.isModalSubmit() && module.type === 7 && interaction.customId === module.customId)
                                module.run(client, interaction);
                        });
                    }
                    ;
                    this.collection.set(module.customId, module);
                    this.emit('fileLoad', module.customId, module.type);
                }
                ;
                resolved(data);
            }
            catch (e) {
                rejected(e);
            }
            ;
        });
    }
    ;
    /**
     * Reloads all components from the provided path.
     */
    reload() {
        return new Promise(async (resolved, rejected) => {
            try {
                this.collection.clear();
                const output = await this.load();
                resolved(output);
            }
            catch (e) {
                rejected(e);
            }
            ;
        });
    }
    ;
    addComponents(...components) {
        for (const component of components) {
            if (!component || !component.customId || !component.type || !component.run)
                continue;
            this.collection.set(component.customId, component);
        }
        ;
        return this;
    }
    ;
    setComponents(...components) {
        this.collection.clear();
        for (const component of components) {
            if (!component || !component.customId || !component.type || !component.run)
                continue;
            this.collection.set(component.customId, component);
        }
        ;
        return this;
    }
    ;
}
exports.ComponentsHandler = ComponentsHandler;
;
//# sourceMappingURL=ComponentsHandler.js.map