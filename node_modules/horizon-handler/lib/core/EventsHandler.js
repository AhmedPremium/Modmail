"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventsHandler = void 0;
const utils_1 = require("./utils");
const events_1 = require("events");
class EventsHandler extends events_1.EventEmitter {
    /**
     * Creates a new handler for Discord bot client's events.
     * @param {string} path The directory path.
     * @param {boolean | undefined} includesDir Whenever the directory has sub-dirs or not.
     * @typeParam {Client} C The Discord bot Client.
     * @typeParam {keyof ClientEvents} K The client events' keys.
     * @typeParam {{ [k: string]: any[] }} I Custom events names and arguments.
     */
    constructor(path, includesDir) {
        super({ captureRejections: false });
        this.includesDir = false;
        /**
         * Creates a new event for the handler.
         *
         * **Warning**: Make sure that you have exported it as `default`.
         *
         * ```ts
         * // TypeScript
         * export default new [handler].event(...);
         *
         * // JavaScript (CommonJS)
         * module.exports = new [handler].event(...);
         * ```
         */
        this.event = class {
            constructor(data) {
                this.event = data.event;
                this.once = data.once;
                this.run = data.run;
            }
            ;
        };
        /**
         * Creates a new custom event for the handler.
         *
         * **Warning**: Make sure that you have exported it as `default`.
         *
         * ```ts
         * // TypeScript
         * export default new [handler].customevent(...);
         *
         * // JavaScript (CommonJS)
         * module.exports = new [handler].customevent(...);
         * ```
         */
        this.customevent = class {
            constructor(data) {
                this.event = data.event;
                this.once = data.once;
                this.run = data.run;
            }
            ;
        };
        if (!path)
            throw new utils_1.HorizonError('MissingRequiredParameter', '\'path\' is required for the constructor.');
        if (includesDir && typeof includesDir !== 'boolean')
            throw new utils_1.HorizonError('InvalidParameterType', '\'includesDir\' is not type of boolean.');
        this.path = path;
        this.includesDir = includesDir;
    }
    ;
    /**
     * Loads all events from the provided path.
     * @param {C} client The Discord bot client to listen to these events.
     */
    load(client) {
        if (!client)
            throw new utils_1.HorizonError('MissingRequiredParameter', '\'client\' is required for the method.');
        return new Promise(async (resolved, rejected) => {
            try {
                const data = await (0, utils_1.importFromDir)(this.path, {
                    includesDir: this.includesDir
                });
                for (const module of data) {
                    if (!module.event || !module.run) {
                        this.emit('fileSkip', module.event);
                        continue;
                    }
                    ;
                    if (module.once) {
                        client.once(module.event, (...args) => module.run(client, ...args));
                    }
                    else {
                        client.on(module.event, (...args) => module.run(client, ...args));
                    }
                    ;
                    this.emit('fileLoad', module.event);
                }
                ;
                resolved(data);
            }
            catch (e) {
                rejected(e);
            }
            ;
        });
    }
    ;
}
exports.EventsHandler = EventsHandler;
;
//# sourceMappingURL=EventsHandler.js.map