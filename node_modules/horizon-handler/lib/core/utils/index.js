"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HorizonError = exports.importFromDir = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const importFromDir = async (path, options) => {
    const data = [];
    const main = async (directoryPath) => {
        try {
            if (options?.includesDir) {
                const files = await fs_1.promises.readdir(directoryPath);
                for (const file of files) {
                    const filePath = (0, path_1.join)(directoryPath, file);
                    const fileStat = await fs_1.promises.stat(filePath);
                    if (fileStat.isDirectory()) {
                        await main(filePath);
                    }
                    else {
                        const fileExtension = (0, path_1.extname)(file);
                        if (fileExtension === '.js' || fileExtension === '.cjs') {
                            const url = (0, path_1.resolve)("./", `${filePath}${filePath.endsWith("/") ? "" : "/"}`);
                            const fileData = require(url);
                            data.push(fileData?.default ? fileData.default : fileData);
                        }
                        ;
                    }
                    ;
                }
                ;
            }
            else {
                const files = await fs_1.promises.readdir(directoryPath);
                for (const file of files) {
                    const filePath = (0, path_1.join)(directoryPath, file);
                    const fileExtension = (0, path_1.extname)(file);
                    if (fileExtension === '.js' || fileExtension === '.cjs') {
                        const url = (0, path_1.resolve)("./", `${filePath}${filePath.endsWith("/") ? "" : "/"}`);
                        const fileData = require(url);
                        data.push(fileData?.default ? fileData.default : fileData);
                    }
                    ;
                }
                ;
            }
            ;
        }
        catch (err) {
            throw new Error('An error has occured.\n' + err);
        }
        ;
    };
    await main(path);
    return data;
};
exports.importFromDir = importFromDir;
class HorizonError extends Error {
    constructor(code, ...args) {
        super(`[Horizon Handler] ${code}: ${args.join('')}`);
    }
    ;
}
exports.HorizonError = HorizonError;
;
//# sourceMappingURL=index.js.map